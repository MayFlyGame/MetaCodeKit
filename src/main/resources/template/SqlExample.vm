########################################################################################
##
## Common variables:
##  $YEAR - yyyy
##  $TIME - yyyy-MM-dd HH:mm:ss
##  $USER - user.name
##
## Available variables:
##  $class0 - the context class, alias: $class
##  $class1 - the selected class, like $class1, $class2
##  $ClassName - generate by the config of "Class Name", the generated class name
##
## Class Entry Structure:
##  $class0.className - the class Name
##  $class0.packageName - the packageName
##  $class0.importList - the list of imported classes name
##  $class0.fields - the list of the class fields
##          - type: the field type
##          - name: the field name
##          - modifier: the field modifier, like "private",or "@Setter private" if include annotations
##  $class0.allFields - the list of the class fields include all fields of superclass
##          - type: the field type
##          - name: the field name
##          - modifier: the field modifier, like "private",or "@Setter private" if include annotations
##  $class0.methods - the list of class methods
##          - name: the method name
##          - modifier: the method modifier, like "private static"
##          - returnType: the method returnType
##          - params: the method params, like "(String name)"
##  $class0.allMethods - the list of class methods include all methods of superclass
##          - name: the method name
##          - modifier: the method modifier, like "private static"
##          - returnType: the method returnType
##          - params: the method params, like "(String name)"#
########################################################################################
#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end
#macro (low $strIn)$strIn.valueOf($strIn.charAt(0)).toLowerCase()$strIn.substring(1)#end
#set($class0Var = "#low(${class0.ClassName})")
#set($class1Var = "#low(${class1.ClassName})")
package $class0.PackageName;

#foreach($importer in $class0.ImportList)
import $importer;
#end

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author $USER
 * @version $Id: ${ClassName}.java, v 0.1 $TIME $USER Exp $$
 */
public class $ClassName {

    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> orderCriteria;

    public $ClassName() {
        orderCriteria = new ArrayList<Criteria>();
    }

    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    public String getOrderByClause() {
        return orderByClause;
    }

    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    public boolean isDistinct() {
        return distinct;
    }

    public List<Criteria> getOrderCriteria() {
        return orderCriteria;
    }

    public void or(Criteria criteria) {
        orderCriteria.add(criteria);
    }

    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        orderCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (orderCriteria.size() == 0) {
            orderCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    public void clear() {
        orderCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

    #foreach($field in $class0.allFields)

        #if(${field.Name} == "serialVersionUID" )

        #else


        /** Begin of ${field.Name} **/
        public Criteria and#cap(${field.Name})IsNull() {
            addCriterion("#cap(${field.Name}) is null");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})IsNotNull() {
            addCriterion("#cap(${field.Name}) is not null");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})EqualTo($field.Type value) {
            addCriterion("#low(${field.Name}) =", value, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})NotEqualTo($field.Type value) {
            addCriterion("#low(${field.Name}) <> ", value, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})GreaterThan($field.Type value) {
            addCriterion("#low(${field.Name}) > ", value, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})GreaterThanOrEqualTo($field.Type value) {
            addCriterion("#low(${field.Name}) >= ", value, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})LessThan($field.Type value) {
            addCriterion("#low(${field.Name}) < ", value, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})LessThanOrEqualTo($field.Type value) {
            addCriterion("#low(${field.Name}) <= ", value, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})In(List<$field.Type> values) {
            addCriterion("#low(${field.Name}) in ", values, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})NotIn(List<$field.Type> values) {
            addCriterion("#low(${field.Name}) not in ", values, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})Between($field.Type value1, $field.Type value2) {
            addCriterion("#low(${field.Name}) between ", value1, value2, "#low(${field.Name})");
            return (Criteria) this;
        }

        public Criteria and#cap(${field.Name})NotBetween($field.Type value1, $field.Type value2) {
            addCriterion("#low(${field.Name}) not between ", value1, value2, "#low(${field.Name})");
            return (Criteria) this;
        }

        /** End of ${field.Name} **/
        #end
    #end
    }

    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
           return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}
